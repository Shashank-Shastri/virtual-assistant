name: Deploy Preview

on:
    workflow_run:
        workflows:
            - Build Preview
        types:
            - completed

jobs:
    deploy_preview:
        if: |
          github.event.workflow_run.conclusion == 'success' &&
          !contains(github.event.workflow_run.head_commit.message, '[skip-deploy]')
        runs-on: ubuntu-latest
        steps:
            - name: Download artifact
              uses: dawidd6/action-download-artifact@v2
              with:
                workflow: build-preview.yml
                commit: ${{ github.event.workflow_run.head_sha }}
                name: dist

            - name: Deploy to Firebase
              id: deploy_preview
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                repoToken: '${{ secrets.GITHUB_TOKEN }}'
                firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_MOVIE_RECOMMENDATION_77E17 }}'
                projectId: movie-recommendation-77e17
                channelId: 'pr-${{ github.event.workflow_run.head_branch }}'
              env:
                  FIREBASE_CLI_PREVIEWS: hostingchannels

            - name: Set comment message
              id: comment_message
              run: |
                EVENT_FILE=`cat ./event.json`
                IS_FORK=`echo $(jq -r '.pull_request.head.repo.fork' <<< "$EVENT_FILE")`
                EXPIRES=$(date --date='${{ steps.deploy_preview.outputs.expire_time }}')
                URL_1=${{ fromJSON(steps.deploy_preview.outputs.urls)[0] }}
                URL_2=${{ fromJSON(steps.deploy_preview.outputs.urls)[1] }}
                if $IS_FORK
                then
                  THANKS="Thanks for your PR ðŸŽ‰"
                else
                  THANKS=""
                fi
                COMMENT_MESSAGE=$(cat << EOF
                $THANKS
                Visit the preview URL for this PR (updated for commit ${{ github.event.workflow_run.head_sha }}):
                - [$URL_1]($URL_1)
                - [$URL_2]($URL_2)
                <sub>(expires $EXPIRES)</sub>
                EOF
                )
                echo "COMMENT_MESSAGE<<EOF" >> $GITHUB_ENV
                echo "$COMMENT_MESSAGE" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                            
            - name: Parse PR number
              id: pr_number
              run: |
                EVENT_FILE=`cat ./event.json`
                PR_NUMBER=`echo $(jq -r '.number' <<< "$EVENT_FILE")`
                echo "::set-output name=pr_number::$PR_NUMBER"
            - name: Comment on PR
              uses: actions/github-script@v6
              env:
               COMMENT_MESSAGE: '${{ env.COMMENT_MESSAGE }}'
               PR_NUMBER: '${{ steps.pr_number.outputs.pr_number }}'
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                    // Get the existing comments.
                    const { data: comments } = await github.rest.issues.listComments({
                        issue_number: process.env.PR_NUMBER,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                    });
                    // Find any comment already made by the bot.
                    const botComment = comments.find(
                        comment =>
                            comment.user.type === 'Bot' &&
                            comment.body.includes('Visit the preview URL for this PR')
                    );
                    if (botComment) {
                        await github.rest.issues.updateComment({
                            body: process.env.COMMENT_MESSAGE,
                            comment_id: botComment.id,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                        });
                    } else {
                        await github.rest.issues.createComment({
                            body: process.env.COMMENT_MESSAGE,
                            issue_number: process.env.PR_NUMBER,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                        });
                    }
